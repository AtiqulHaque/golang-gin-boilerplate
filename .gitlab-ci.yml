image: docker:stable

variables:
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  DOCKER_TLS_CERTDIR: ""
  MYSQL_DATABASE: test
  MYSQL_ROOT_PASSWORD: db_password


services:
  - docker:dind
  - mysql:8.0

stages:
  - test
  - build
  - deploy

lint:
  image: golangci/golangci-lint:v1.51.0
  stage: test
  before_script:
    - cp .env.testing.gitlab-ci .env.testing
    - go install github.com/swaggo/swag/cmd/swag@latest
    - swag init
  script:
    - golangci-lint run

test:
  image: golang:1.20.1-alpine3.17
  tags:
    - dind
    - docker
  stage: test
  before_script:
    - apk add --no-cache --update git build-base openssh-client curl tar
    - cp .env.testing.gitlab-ci .env.testing
    - go install github.com/swaggo/swag/cmd/swag@latest
    - go install github.com/pressly/goose/cmd/goose@latest
    - swag init
  script:
    # get dependencies
    - go get -v ./...
    - goose -dir "./server/db/migrations" mysql "root:db_password@tcp(mysql:3306)/test?parseTime=true" up
    - go test -v ./...

build:
  tags:
    - dind
    - docker
  stage: build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cp deploy/Dockerfile .
    - docker build
      --build-arg WEB_PRIVATE_KEY="$WEB_PRIVATE_KEY"
      --build-arg GIT_DOMAIN=$CI_SERVER_HOST
      -t $CI_REGISTRY_IMAGE:staging .
    - docker push $CI_REGISTRY_IMAGE:staging

deploy staging:
  environment:
    name: staging
  when: manual
  tags:
    - dind
    - docker
  stage: deploy
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --update openssh-client bash
    - mkdir -p ~/.ssh
    - echo "$STAGING_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $STAGING_IP >> ~/.ssh/authorized_keys
  script:
    - ssh dev@${STAGING_IP} "mkdir -p ${PROJECT_PATH}"
    - scp -r ${STAGING_ENV} dev@${STAGING_IP}:${PROJECT_PATH}/.env
    - scp -r ./deploy/compose.yml dev@${STAGING_IP}:${PROJECT_PATH}/compose.yml
    - ssh dev@$STAGING_IP "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};
      docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}:staging;
      docker compose -f ${PROJECT_PATH}/compose.yml up -d"
